// Generated by view binder compiler. Do not edit!
package com.usermanage.usercrud.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.usermanage.usercrud.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentUserBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ExtendedFloatingActionButton addFab;

  @NonNull
  public final RelativeLayout emptyLayout;

  @NonNull
  public final EditText etSearch;

  @NonNull
  public final ProgressBar idLoadingPB;

  @NonNull
  public final LinearLayout llSearch;

  @NonNull
  public final RecyclerView rvUser;

  @NonNull
  public final MaterialCardView searchBar;

  private FragmentUserBinding(@NonNull FrameLayout rootView,
      @NonNull ExtendedFloatingActionButton addFab, @NonNull RelativeLayout emptyLayout,
      @NonNull EditText etSearch, @NonNull ProgressBar idLoadingPB, @NonNull LinearLayout llSearch,
      @NonNull RecyclerView rvUser, @NonNull MaterialCardView searchBar) {
    this.rootView = rootView;
    this.addFab = addFab;
    this.emptyLayout = emptyLayout;
    this.etSearch = etSearch;
    this.idLoadingPB = idLoadingPB;
    this.llSearch = llSearch;
    this.rvUser = rvUser;
    this.searchBar = searchBar;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_fab;
      ExtendedFloatingActionButton addFab = ViewBindings.findChildViewById(rootView, id);
      if (addFab == null) {
        break missingId;
      }

      id = R.id.emptyLayout;
      RelativeLayout emptyLayout = ViewBindings.findChildViewById(rootView, id);
      if (emptyLayout == null) {
        break missingId;
      }

      id = R.id.et_search;
      EditText etSearch = ViewBindings.findChildViewById(rootView, id);
      if (etSearch == null) {
        break missingId;
      }

      id = R.id.idLoadingPB;
      ProgressBar idLoadingPB = ViewBindings.findChildViewById(rootView, id);
      if (idLoadingPB == null) {
        break missingId;
      }

      id = R.id.llSearch;
      LinearLayout llSearch = ViewBindings.findChildViewById(rootView, id);
      if (llSearch == null) {
        break missingId;
      }

      id = R.id.rvUser;
      RecyclerView rvUser = ViewBindings.findChildViewById(rootView, id);
      if (rvUser == null) {
        break missingId;
      }

      id = R.id.search_bar;
      MaterialCardView searchBar = ViewBindings.findChildViewById(rootView, id);
      if (searchBar == null) {
        break missingId;
      }

      return new FragmentUserBinding((FrameLayout) rootView, addFab, emptyLayout, etSearch,
          idLoadingPB, llSearch, rvUser, searchBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
